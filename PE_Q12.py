"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
"""
from math import sqrt


def get_tri(cur_nat):
    return sum(range(1,cur_nat+1))


def get_divisors(test_int):
    """
    Using sqrt method drops this function to O(sqrt(n))
    https://www.geeksforgeeks.org/find-divisors-natural-number-set-1/
    """
    div_list = list()
    i = 1
    while i < sqrt(test_int):
        if test_int % i == 0:
            if test_int / i == i:
                div_list.append(i)
            else:
                div_list.extend([i, int(test_int/i)])
        i += 1
    return len(div_list)


def test():
    assert get_tri(4) == 10
    assert get_divisors(21) == 4
    assert get_divisors(28) == 6


def main():
    i = 0
    max_divs = 0
    while max_divs < 500:
        tri = get_tri(i)
        divisors = get_divisors(tri)
        if divisors > max_divs:
            max_divs = get_divisors(tri)
        i += 1
    print(tri, max_divs)


test()
main()
